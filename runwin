#!/bin/bash
function fail {
	echo "FATAL ERROR: $1"
	echo "Cleaning up..."
	taskkill -im unrealircd.exe -f -t
	taskkill -im timeout.exe -f -t
	echo "Tests failed. See errors above."
	exit 1
}

if [ "$MAXPARALLEL" = "" ]; then
	MAXPARALLEL="25"
fi
TIMEOUT="40"
KEEPDBS="0"
INCLUDEFILE=""

UNREALIRCDDIR="/c/Program Files/UnrealIRCd 5"

# Stupid? Yes!
find tests/ -type f -exec sed -i -e 's/\#\!\/usr\/bin\/python/\#\!\/c\/Python27\/python/g' {} \;

export PYTHONPATH="`pwd`"
export PYTHONIOENCODING=utf-8
export TIMEOUT

rm -rf logs
mkdir logs
mkdir logs/success
mkdir logs/failure

if [ "$1" = "-include" ]; then
	shift
	INCLUDEFILE="$1"
	shift
fi

if [ "$1" = "-single" ]; then
	MAXPARALLEL=1
	shift
fi

if [ "$1" = "-keepdbs" ]; then
	KEEPDBS=1
	shift
fi

if [ "$1" = "-boot" -o "$1" = "" ]; then
	shift

	# Boot the ircd
	echo "Booting IRC server..."
	taskkill -im unrealircd.exe -f
	sleep 1
	cp -av serverconfig/unrealircd/* "$UNREALIRCDDIR/conf/" || fail "Could not copy configuration files"
	cd "$UNREALIRCDDIR/bin" || fail "Could not change to UnrealIRCd directory"
	echo "Now in:"
	pwd

	if [ "$KEEPDBS" -eq 0 ]; then
		# Delete databases
		mkdir data/old 2>/dev/null
		mv data/*.db data/old/ 2>/dev/null
		rm -rf data/history.old 2>/dev/null
		mv data/history data/history.old 2>/dev/null
	fi

	if [ "$INCLUDEFILE" != "" ]; then
		# Add include to irc1.conf (only)
		echo 'include "'$INCLUDEFILE'";' >>conf/irc1.conf
	fi

	./unrealircd -f irc2.conf&
	sleep 10
	./unrealircd -f irc1.conf&
	sleep 10
	./unrealircd -f irc3.conf&
	sleep 10
	cd -

	COUNTPROCS="`tasklist.exe|grep -i unrealircd|wc -l`"
	if [ "$COUNTPROCS" -lt 3 ]; then
		fatal "UnrealIRCd failed to boot"
	fi

	(timeout --kill-after=5 --signal=INT 15 tests/_pre_test) || fail "UnrealIRCd servers did not link"
	echo
fi

if [ "$1" = "" ]; then
	# Run all tests:
	echo "Running all tests in parallel..."
	# NOTE: we skip services tests on Windows! Too much hassle ;)
	find tests -type f|grep -vF '~'|grep -vF _pre_test|grep -v services/|grep -vF /db/|grep -vF /serial/|xargs -L1 -P$MAXPARALLEL irctestframework/wrapper
	#wait
	#^ this is annoying: 'wait' will also wait for unrealircd.exe to stop,
	#  which hopefully will never happen, so we sleep instead:
	sleep 45
	echo "Running remaining tests in series..."
	find tests/serial/ -type f|grep -vF '~'|grep -vF README|xargs -L1 -P1 irctestframework/wrapper
	# And again, we sleep here too, what a joke... convert to some tasklist|find shit ?
	sleep 45
	taskkill -im unrealircd.exe -f
else
	# Run specific tests:
	echo "Running specific tests by user request..."
	for f in $*
	do
		# Skip backup files and such (blah~)
		if (echo "$f"|egrep -q '~$'); then
			continue
		fi
		if [ "$f" = "tests/db/writing/history" -o "$f" = "tests/db/reading/history" ]; then
			if ! (echo "$INCLUDEFILE"|grep -q 'crypt'); then
				echo "WARNING: Skipping $f -- not using encryption so can't test this"
				continue
			fi
		fi
		irctestframework/wrapper $f
	done
fi

cd logs/success
echo
echo "==================================================================================================="
echo ">>> SUCCESFUL TESTS"
for f in *.log
do
	name="`echo $f|sed 's/__/\//g'|sed 's/\.log//g'`"
	if [ "$f" == "*.log" ]; then
		continue
	fi
	echo "âœ” $name"
done
cd - 1>/dev/null 2>&1
echo "==================================================================================================="

failed=0
cd logs/failure
for f in *.log
do
	name="`echo $f|sed 's/__/\//g'|sed 's/\.log//g'`"
	if [ "$f" == "*.log" ]; then
		continue
	fi
	echo
	echo "==================================================================================================="
	echo ">>> FAILED TEST: $name"
	cat $f
	echo "==================================================================================================="
	echo
	failed=1
done

if [ "$failed" = 1 ]; then
	echo
	echo "======[ SUMMARY ]======"
	for f in *.log
	do
		name="`echo $f|sed 's/__/\//g'|sed 's/\.log//g'`"
		if [ "$f" == "*.log" ]; then
			continue
		fi
		echo "TEST FAILED: $name"
	done
fi

cd - 1>/dev/null 2>&1

taskkill -im unrealircd.exe -f -t
taskkill -im timeout.exe -f -t

exit $failed
